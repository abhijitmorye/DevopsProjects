To cretae network --
    docker network create <network_name>

Unlike using links, docker network behave like traditional networks where nodes can be attached/detached.

The first thing you'll notice is that Docker no longer assigns environment variables or updates the hosts file of containers. Explore using the following two commands and you'll notice it no longer mentions other containers.

    docker run --net=backend-network alpine env

    docker run --net=backend-network alpine cat /etc/hosts

Instead, the way containers can communicate via an Embedded DNS Server in Docker. This DNS server is assigned to all containers via the IP 127.0.0.11 and set in the resolv.conf file.

    docker run --net=backend-network alpine cat /etc/resolv.conf

When containers attempt to access other containers via a well-known name, such as Redis, the DNS server will return the IP address of the correct Container. In this case, the fully qualified name of Redis will be redis.backend-network

    docker run --net=backend-network alpine ping -c1 redis

Step 3 - Connect Two Containers
Docker supports multiple networks and containers being attached to more than one network at a time.

For example, let's create a separate network with a Node.js application that communicates with our existing Redis instance.

Task
The first task is to create a new network in the same way.

    docker network create frontend-network

When using the connect command it is possible to attach existing containers to the network.

    docker network connect frontend-network redis

When we launch the web server, given it's attached to the same network it will be able to communicate with our Redis instance.

    docker run -d -p 3000:3000 --net=frontend-network katacoda/redis-node-docker-example

You can test it using curl docker:3000


The following command will connect our Redis instance to the frontend-network with the alias of db.

docker network create frontend-network2
docker network connect --alias db frontend-network2 redis

When containers attempt to access a service via the name db, they will be given the IP address of our Redis container.

docker run --net=frontend-network2 alpine ping -c1 db